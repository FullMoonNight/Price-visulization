{"version":3,"sources":["components/ChartPanel/ChartPanel.tsx","components/ParamsLine/ParamsLine.tsx","components/ParamsList/ParamsList.tsx","components/ParamsPanel/styled.ts","constants.ts","components/ParamsPanel/ParamsPanel.tsx","utils/priceFunction.ts","utils/createChartDataset.ts","hooks/useData.ts","App.tsx","index.tsx"],"names":["Chart","register","CategoryScale","LinearScale","PointElement","LineElement","LogarithmicScale","Legend","Tooltip","ChartPanel","props","data","React","createElement","Line","options","scales","x","type","position","ParamsLine","paramName","defaultValue","range","step","onChange","label","_ref","_ref2","_slicedToArray","minValue","maxValue","Grid","container","spacing","item","xs","Typography","variant","Slider","aria-label","marks","min","max","track","valueLabelDisplay","_","value","ParamsList","params","onChangeParameter","columnSpacing","rowSpacing","map","param","i","key","xl","md","Object","assign","ParamsTitle","styled","h1","_templateObject","_taggedTemplateLiteral","parameters","ParamsPanel","Fragment","S","fixedCostsForOneDealFunction","avgSalary","warehouseSpace","warehouseSpaceCost","distanceFromCity","overheadCosts","marketing","m","warehouse","salaries","Math","floor","fixedCostsFunction","variableCostsForOneDealFunction","deliveryCostAvg","deliveryPercent","productPrice","periodValuableUsage","wearTearMulti","stealProbability","acquireSale","conversion","dealCntMonth","productPriceWithSale","variableCostsFunction","totalCostsFunction","incomeFunction","averageCost","ourSale","prtTestDrive","createDataset","func","axis","arguments","length","undefined","labels","dataset","push","toString","useData","charts","total","variable","fixed","profit","income","partner","forAll","datasets","foo","_createDataset","costD","chartLabels","backgroundColor","borderColor","_createDataset2","incomeD","totalCostsForOneDealFunction","_createDataset3","clientD","profitFunction","_createDataset4","profitLabels","_createDataset5","partnerIncomeFunction","_createDataset6","App","initialState","reduce","result","curr","_useImmer","useImmer","_useImmer2","paramsValue","setParamsValue","dataFirstChart","dataSecondChart","dataThirdChart","dataFourthChart","dataPartnerChart","Container","parameterName","draft","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9f6e2f6f.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  LogarithmicScale,\r\n  Legend,\r\n  Tooltip,\r\n} from \"chart.js\";\r\nimport \"chartjs-plugin-zoom\";\r\n\r\nChart.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  LogarithmicScale,\r\n  Legend,\r\n  Tooltip\r\n);\r\n\r\ninterface ChartPanelProps {\r\n  data: any;\r\n}\r\n\r\nexport const ChartPanel: FC<ChartPanelProps> = (props) => {\r\n  const { data } = props;\r\n\r\n  return (\r\n    <Line\r\n      data={data}\r\n      options={{\r\n        // zoom: {\r\n        //   enabled: true,\r\n        //   mode: \"x\",\r\n        // },\r\n        // pan: {\r\n        //   enabled: true,\r\n        //   mode: \"x\",\r\n        // },\r\n\r\n        scales: {\r\n          x: {\r\n            type: \"logarithmic\",\r\n            position: \"left\", // `axis` is determined by the position as `'y'`\r\n          },\r\n        },\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { Grid, Slider, Typography } from \"@mui/material\";\r\n\r\ninterface ParamsLineProps {\r\n  paramName: string;\r\n  label?: string;\r\n  range?: [number, number];\r\n  step?: number;\r\n  defaultValue?: number;\r\n  onChange: (paramName: string, value: number) => void;\r\n}\r\n\r\nexport const ParamsLine: FC<ParamsLineProps> = (props) => {\r\n  const { paramName, defaultValue, range, step, onChange, label } = props;\r\n  const [minValue, maxValue] = range || [0, 100];\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={4}>\r\n        <Typography variant={\"subtitle2\"}>{label || paramName}</Typography>\r\n      </Grid>\r\n      <Grid item xs={8}>\r\n        <Slider\r\n          aria-label={paramName}\r\n          marks\r\n          min={minValue}\r\n          max={maxValue}\r\n          step={step}\r\n          track={false}\r\n          defaultValue={defaultValue || minValue}\r\n          valueLabelDisplay=\"auto\"\r\n          onChange={(_, value) => onChange(paramName, value as number)}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\n\r\nimport { ParamsLine } from \"../ParamsLine\";\r\nimport { ParameterObject } from \"../../constants\";\r\n\r\ninterface ParamsListProps {\r\n  params: ParameterObject[];\r\n  onChangeParameter: (paramName: string, value: number) => void;\r\n}\r\n\r\nexport const ParamsList: FC<ParamsListProps> = (props) => {\r\n  const { params, onChangeParameter } = props;\r\n\r\n  const renderParameterLines = () => {\r\n    return params.map((param, i) => (\r\n      <Grid key={i} item xl={4} md={6} xs={12}>\r\n        <ParamsLine {...param} onChange={onChangeParameter} />\r\n      </Grid>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <Grid container columnSpacing={2} rowSpacing={4}>\r\n      {renderParameterLines()}\r\n    </Grid>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const ParamsTitle = styled.h1`\r\n  margin: 10;\r\n`;\r\n","import { FunctionParameters } from \"./utils/priceFunction\";\r\n\r\nexport interface ParameterObject {\r\n  paramName: keyof FunctionParameters;\r\n  range: [number, number];\r\n  defaultValue: number;\r\n  step: number;\r\n  label?: string;\r\n}\r\n\r\nexport const parameters: ParameterObject[] = [\r\n  {\r\n    paramName: \"avgSalary\",\r\n    label: \"Средняя зарплата\",\r\n    range: [0, 500000],\r\n    defaultValue: 50000,\r\n    step: 10000,\r\n  },\r\n  {\r\n    paramName: \"warehouseSpace\",\r\n    label: \"Площадь склада\",\r\n    range: [0, 1000],\r\n    defaultValue: 10,\r\n    step: 50,\r\n  },\r\n  {\r\n    paramName: \"warehouseSpaceCost\",\r\n    label: \"Цена за метр склада\",\r\n    range: [0, 5000],\r\n    defaultValue: 0,\r\n    step: 500,\r\n  },\r\n  {\r\n    paramName: \"distanceFromCity\",\r\n    label: \"Коэффициент удаленности от города\",\r\n    range: [0, 1],\r\n    defaultValue: 0.5,\r\n    step: 0.05,\r\n  },\r\n  {\r\n    paramName: \"deliveryCostAvg\",\r\n    label: \"Средняя цена доставки\",\r\n    range: [0, 5000],\r\n    defaultValue: 1000,\r\n    step: 100,\r\n  },\r\n  {\r\n    paramName: \"deliveryPercent\",\r\n    label: \"Процент заказов с доставкой\",\r\n    range: [0, 1],\r\n    defaultValue: 0,\r\n    step: 0.01,\r\n  },\r\n  {\r\n    paramName: \"productPrice\",\r\n    label: \"Средняя рыночная цена товара\",\r\n    range: [0, 500000],\r\n    defaultValue: 40000,\r\n    step: 5000,\r\n  },\r\n  {\r\n    paramName: \"acquireSale\",\r\n    label: \"Скидка на товар для нас\",\r\n    range: [0, 1],\r\n    defaultValue: 0.3,\r\n    step: 0.01,\r\n  },\r\n  {\r\n    paramName: \"periodValuableUsage\",\r\n    label: \"Период полезного использования\",\r\n    range: [0, 10],\r\n    defaultValue: 4,\r\n    step: 1,\r\n  },\r\n  {\r\n    paramName: \"wearTearMulti\",\r\n    label: \"Среднее состояние товара у нас\",\r\n    range: [0, 1],\r\n    defaultValue: 0.7,\r\n    step: 0.05,\r\n  },\r\n  {\r\n    paramName: \"stealProbability\",\r\n    label: \"Вероятность кражи\",\r\n    range: [0, 1],\r\n    defaultValue: 0.05,\r\n    step: 0.01,\r\n  },\r\n  {\r\n    paramName: \"overheadCosts\",\r\n    label: \"Процент накладных расходов\",\r\n    range: [0, 1],\r\n    defaultValue: 0.15,\r\n    step: 0.01,\r\n  },\r\n  {\r\n    paramName: \"prtTestDrive\",\r\n    label: \"Процент партнерам за тест-драйв\",\r\n    range: [0, 1],\r\n    defaultValue: 0.2,\r\n    step: 0.05,\r\n  },\r\n  {\r\n    paramName: \"conversion\",\r\n    label: \"Конверсия на продажу с тест-драйва\",\r\n    range: [0, 1],\r\n    defaultValue: 0.3,\r\n    step: 0.05,\r\n  },\r\n  {\r\n    paramName: \"ourSale\",\r\n    label: \"Наш процент с продажи\",\r\n    range: [0, 1],\r\n    defaultValue: 0.2,\r\n    step: 0.05,\r\n  },\r\n  {\r\n    paramName: \"upDelivery\",\r\n    label: \"Процент наценки за доставку\",\r\n    range: [0, 1],\r\n    defaultValue: 0.1,\r\n    step: 0.01,\r\n  },\r\n  {\r\n    paramName: \"marketing\",\r\n    label: \"Расход на маркетинг\",\r\n    range: [0, 1000],\r\n    defaultValue: 300,\r\n    step: 1,\r\n  },\r\n  {\r\n    paramName: \"dealCntMonth\",\r\n    label: \"Количество сделок для одного товара\",\r\n    defaultValue: 4,\r\n    range: [3, 6],\r\n    step: 1,\r\n  },\r\n  {\r\n    paramName: \"averageCost\",\r\n    label: \"Средняя цена сделки\",\r\n    defaultValue: 5000,\r\n    range: [1000, 20000],\r\n    step: 500,\r\n  },\r\n];\r\n","import React, { FC } from \"react\";\r\nimport { ParamsList } from \"../ParamsList\";\r\nimport * as S from \"./styled\";\r\n\r\nimport { parameters } from \"../../constants\";\r\n\r\ninterface ParamsPanelProps {\r\n  onChangeParameter: (paramName: string, value: number) => void;\r\n}\r\n\r\nexport const ParamsPanel: FC<ParamsPanelProps> = (props) => {\r\n  const { onChangeParameter } = props;\r\n  return (\r\n    <>\r\n      <S.ParamsTitle>Параметры</S.ParamsTitle>\r\n      <ParamsList params={parameters} onChangeParameter={onChangeParameter} />\r\n    </>\r\n  );\r\n};\r\n","export interface FunctionParameters {\r\n  avgSalary: number;\r\n  warehouseSpace: number;\r\n  warehouseSpaceCost: number;\r\n  distanceFromCity: number;\r\n  deliveryCostAvg: number;\r\n  deliveryPercent: number;\r\n  productPrice: number;\r\n  periodValuableUsage: number;\r\n  wearTearMulti: number;\r\n  stealProbability: number;\r\n  overheadCosts: number;\r\n  acquireSale: number;\r\n  prtTestDrive: number;\r\n  conversion: number;\r\n  ourSale: number;\r\n  upDelivery: number;\r\n  marketing: number;\r\n  dealCntMonth: number;\r\n  averageCost: number;\r\n}\r\n\r\nexport const fixedCostsForOneDealFunction = (params: FunctionParameters) => {\r\n  const {\r\n    avgSalary,\r\n    warehouseSpace,\r\n    warehouseSpaceCost,\r\n    distanceFromCity,\r\n    overheadCosts,\r\n\r\n    marketing,\r\n  } = params;\r\n\r\n  return (m: number) => {\r\n    const warehouse = warehouseSpace * warehouseSpaceCost * distanceFromCity;\r\n    const salaries = 1.404 * avgSalary * (7 + Math.floor(m / 1000));\r\n\r\n    const fixedCosts = (warehouse + marketing + salaries) * (overheadCosts + 1);\r\n\r\n    return fixedCosts / m;\r\n  };\r\n};\r\n\r\nexport const fixedCostsFunction = (params: FunctionParameters) => {\r\n  return (m: number) => {\r\n    return fixedCostsForOneDealFunction(params)(m) * m;\r\n  };\r\n};\r\n\r\nexport const variableCostsForOneDealFunction = (params: FunctionParameters) => {\r\n  const {\r\n    deliveryCostAvg,\r\n    deliveryPercent,\r\n    productPrice,\r\n    periodValuableUsage,\r\n    wearTearMulti,\r\n    stealProbability,\r\n    overheadCosts,\r\n    acquireSale,\r\n\r\n    conversion,\r\n    dealCntMonth,\r\n  } = params;\r\n  return (m: number) => {\r\n    const productPriceWithSale = productPrice * (1 - acquireSale);\r\n    const delivery = (2 + conversion) * deliveryCostAvg * deliveryPercent;\r\n    const steal = productPriceWithSale * wearTearMulti * stealProbability;\r\n    const valuableUsage =\r\n      productPriceWithSale / (12 * periodValuableUsage * dealCntMonth);\r\n\r\n    const variableCosts =\r\n      (delivery + steal + valuableUsage) * (overheadCosts + 1);\r\n    return variableCosts;\r\n  };\r\n};\r\n\r\nexport const variableCostsFunction = (params: FunctionParameters) => {\r\n  return (m: number) => {\r\n    return variableCostsForOneDealFunction(params)(m) * m;\r\n  };\r\n};\r\n\r\nexport const totalCostsForOneDealFunction = (params: FunctionParameters) => {\r\n  return (m: number) => {\r\n    const fixedCosts = fixedCostsForOneDealFunction(params)(m);\r\n    const variableCosts = variableCostsForOneDealFunction(params)(m);\r\n    return fixedCosts + variableCosts;\r\n  };\r\n};\r\n\r\nexport const totalCostsFunction = (params: FunctionParameters) => {\r\n  return (m: number) => {\r\n    const fixedCosts = fixedCostsFunction(params)(m);\r\n    const variableCosts = variableCostsFunction(params)(m);\r\n    return fixedCosts + variableCosts;\r\n  };\r\n};\r\n\r\nexport const incomeFunction = (params: FunctionParameters) => {\r\n  const {\r\n    averageCost,\r\n    conversion,\r\n    ourSale,\r\n    productPrice,\r\n    prtTestDrive,\r\n    acquireSale,\r\n  } = params;\r\n  return (m: number) => {\r\n    const income =\r\n      (1 - prtTestDrive) * m * averageCost +\r\n      ourSale *\r\n        m *\r\n        conversion *\r\n        (productPrice - averageCost - productPrice * (1 - acquireSale));\r\n    return income;\r\n  };\r\n};\r\n\r\nexport const profitFunction = (params: FunctionParameters) => {\r\n  return (m: number) => {\r\n    const profitByRent =\r\n      incomeFunction(params)(m) - totalCostsFunction(params)(m);\r\n    return profitByRent;\r\n  };\r\n};\r\n\r\nexport const partnerIncomeFunction = (params: FunctionParameters) => {\r\n  const {\r\n    prtTestDrive,\r\n    averageCost,\r\n    conversion,\r\n    ourSale,\r\n    productPrice,\r\n    acquireSale,\r\n  } = params;\r\n  return (m: number) => {\r\n    const profitByTestDrive = prtTestDrive * averageCost * m;\r\n    const profitBySale =\r\n      (productPrice * (1 - acquireSale) +\r\n        productPrice * acquireSale * (1 - ourSale)) *\r\n      m *\r\n      conversion;\r\n    return profitBySale + profitByTestDrive;\r\n  };\r\n};\r\n","export const createDataset = (\r\n  func: (m: number) => number,\r\n  axis: number,\r\n  step: number = 1,\r\n  minAsix: number = 0,\r\n): { labels: string[]; dataset: number[] } => {\r\n  const labels = [];\r\n  const dataset = [];\r\n  for (let i = minAsix; i < axis; i += step) {\r\n    labels.push(i.toString());\r\n    dataset.push(func(i));\r\n  }\r\n\r\n  return { dataset, labels };\r\n};\r\n","import {\r\n  FunctionParameters,\r\n  fixedCostsFunction,\r\n  variableCostsFunction,\r\n  totalCostsFunction,\r\n  fixedCostsForOneDealFunction,\r\n  variableCostsForOneDealFunction,\r\n  totalCostsForOneDealFunction,\r\n  profitFunction,\r\n  incomeFunction,\r\n  partnerIncomeFunction,\r\n} from \"../utils/priceFunction\";\r\nimport { createDataset } from \"../utils/createChartDataset\";\r\n\r\nexport const useData = (\r\n  params: FunctionParameters,\r\n  axis: number,\r\n  charts: {\r\n    total?: boolean;\r\n    variable?: boolean;\r\n    fixed?: boolean;\r\n    profit?: boolean;\r\n    income?: boolean;\r\n    partner?: boolean;\r\n  } = {\r\n    total: false,\r\n    variable: false,\r\n    fixed: false,\r\n    profit: false,\r\n    income: false,\r\n    partner: false,\r\n  },\r\n  forAll?: boolean\r\n) => {\r\n  const minAsix = 1;\r\n  const step = 10;\r\n  const datasets = [];\r\n  let labels: string[] = [];\r\n  const { total, fixed, profit, variable, income, partner } = charts;\r\n\r\n  if (fixed) {\r\n    const foo = forAll\r\n      ? fixedCostsFunction(params)\r\n      : fixedCostsForOneDealFunction(params);\r\n    const { dataset: costD, labels: chartLabels } = createDataset(\r\n      foo,\r\n      axis,\r\n      step,\r\n      minAsix\r\n    );\r\n\r\n    datasets.push({\r\n      data: costD,\r\n      label: \"fixed\",\r\n      backgroundColor: \"#088fbd\",\r\n      borderColor: \"#088fbd\",\r\n    });\r\n    labels = chartLabels;\r\n  }\r\n\r\n  if (variable) {\r\n    const foo = forAll\r\n      ? variableCostsFunction(params)\r\n      : variableCostsForOneDealFunction(params);\r\n    const { dataset: incomeD, labels: chartLabels } = createDataset(\r\n      foo,\r\n      axis,\r\n      step,\r\n      minAsix\r\n    );\r\n\r\n    datasets.push({\r\n      data: incomeD,\r\n      label: \"variable\",\r\n      backgroundColor: \"#00ff00\",\r\n      borderColor: \"#00ff00\",\r\n    });\r\n    labels = chartLabels;\r\n  }\r\n\r\n  if (total) {\r\n    const foo = forAll\r\n      ? totalCostsFunction(params)\r\n      : totalCostsForOneDealFunction(params);\r\n    const { dataset: clientD, labels: chartLabels } = createDataset(\r\n      foo,\r\n      axis,\r\n      step,\r\n      minAsix\r\n    );\r\n\r\n    datasets.push({\r\n      data: clientD,\r\n      label: \"total\",\r\n      backgroundColor: \"#ff0000\",\r\n      borderColor: \"#ff0000\",\r\n    });\r\n    labels = chartLabels;\r\n  }\r\n\r\n  if (profit) {\r\n    const foo = profitFunction(params);\r\n\r\n    const { dataset, labels: profitLabels } = createDataset(\r\n      foo,\r\n      axis,\r\n      step,\r\n      minAsix\r\n    );\r\n\r\n    datasets.push({\r\n      data: dataset,\r\n      label: \"profit\",\r\n      backgroundColor: \"#cc9aff\",\r\n      borderColor: \"#cc9aff\",\r\n    });\r\n    labels = profitLabels;\r\n  }\r\n\r\n  if (income) {\r\n    const foo = incomeFunction(params);\r\n\r\n    const { dataset, labels: profitLabels } = createDataset(\r\n      foo,\r\n      axis,\r\n      step,\r\n      minAsix\r\n    );\r\n\r\n    datasets.push({\r\n      data: dataset,\r\n      label: \"income\",\r\n      backgroundColor: \"purple\",\r\n      borderColor: \"purple\",\r\n    });\r\n    labels = profitLabels;\r\n  }\r\n\r\n  if (partner) {\r\n    const foo = partnerIncomeFunction(params);\r\n\r\n    const { dataset, labels: profitLabels } = createDataset(\r\n      foo,\r\n      axis,\r\n      step,\r\n      minAsix\r\n    );\r\n\r\n    datasets.push({\r\n      data: dataset,\r\n      label: \"partner\",\r\n      backgroundColor: \"orange\",\r\n      borderColor: \"orange\",\r\n    });\r\n    labels = profitLabels;\r\n  }\r\n\r\n  return {\r\n    labels,\r\n    datasets: datasets,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { ChartPanel } from \"./components/ChartPanel\";\r\nimport { ParamsPanel } from \"./components/ParamsPanel\";\r\nimport { parameters } from \"./constants\";\r\nimport { useImmer } from \"use-immer\";\r\nimport { useData } from \"./hooks/useData\";\r\nimport { FunctionParameters } from \"./utils/priceFunction\";\r\nimport { Container, Grid } from \"@mui/material\";\r\n\r\nexport const App = () => {\r\n  const initialState = parameters.reduce<{\r\n    [key: string]: number;\r\n  }>((result, curr) => {\r\n    result[curr.paramName] = curr.defaultValue;\r\n    return result;\r\n  }, {});\r\n\r\n  const [paramsValue, setParamsValue] = useImmer(initialState);\r\n\r\n  const onChangeParameter = (parameterName: string, value: number) => {\r\n    setParamsValue((draft) => {\r\n      draft[parameterName] = value;\r\n    });\r\n  };\r\n\r\n  const dataFirstChart = useData(\r\n    (paramsValue as unknown) as FunctionParameters,\r\n    20000,\r\n    { fixed: true, total: true, variable: true }\r\n  );\r\n  const dataSecondChart = useData(\r\n    (paramsValue as unknown) as FunctionParameters,\r\n    20000,\r\n    { fixed: true, total: true, variable: true },\r\n    true\r\n  );\r\n  const dataThirdChart = useData(\r\n    (paramsValue as unknown) as FunctionParameters,\r\n    20000,\r\n    { income: true, total: true },\r\n    true\r\n  );\r\n  const dataFourthChart = useData(\r\n    (paramsValue as unknown) as FunctionParameters,\r\n    20000,\r\n    { profit: true },\r\n    true\r\n  );\r\n\r\n  const dataPartnerChart = useData(\r\n    (paramsValue as unknown) as FunctionParameters,\r\n    20000,\r\n    { partner: true },\r\n    true\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <ParamsPanel onChangeParameter={onChangeParameter} />\r\n      <Grid container>\r\n        <Grid item xs={6}>\r\n          <ChartPanel data={dataFirstChart} />\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <ChartPanel data={dataSecondChart} />\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <ChartPanel data={dataThirdChart} />\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <ChartPanel data={dataFourthChart} />\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <ChartPanel data={dataPartnerChart} />\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { App } from \"./App\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\")!);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n"],"sourceRoot":""}