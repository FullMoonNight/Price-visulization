{"version":3,"sources":["components/ChartPanel/ChartPanel.tsx","components/ParamsLine/ParamsLine.tsx","components/ParamsList/ParamsList.tsx","components/ParamsPanel/styled.ts","constants.ts","components/ParamsPanel/ParamsPanel.tsx","hooks/useDataset.ts","utils/generateColor.ts","utils/createChartDataset.ts","utils/priceFunction.ts","App.tsx","index.tsx"],"names":["Chart","register","CategoryScale","LinearScale","PointElement","LineElement","LogarithmicScale","Legend","Tooltip","ChartPanel","props","data","React","createElement","Line","options","scales","x","type","position","ParamsLine","paramName","defaultValue","range","step","onChange","label","_ref","_ref2","_slicedToArray","minValue","maxValue","Grid","container","spacing","item","xs","Typography","variant","Slider","aria-label","marks","min","max","track","valueLabelDisplay","_","value","ParamsList","params","onChangeParameter","columnSpacing","rowSpacing","map","param","i","key","xl","md","Object","assign","ParamsTitle","styled","h1","_templateObject","_taggedTemplateLiteral","parameters","ParamsPanel","Fragment","S","useDataset","axis","chartsInfo","datasets","commonLabels","forEach","chartFunction","chartColor","color","str","hash","length","charCodeAt","colour","toString","slice","generateColor","_createDataset","func","arguments","undefined","labels","dataset","push","createDataset","backgroundColor","borderColor","fixedCostsForOneDealFunction","avgSalary","warehouseSpace","warehouseSpaceCost","distanceFromCity","overheadCosts","marketing","m","warehouse","salaries","Math","floor","fixedCostsFunction","variableCostsForOneDealFunction","deliveryCostAvg","deliveryPercent","productPrice","periodValuableUsage","wearTearMulti","stealProbability","acquireSale","conversion","dealCntMonth","productPriceWithSale","variableCostsFunction","totalCostsForOneDealFunction","totalCostsFunction","incomeFunction","averageCost","ourSale","prtTestDrive","profitFunction","partnerIncomeFunction","App","initialState","reduce","result","curr","_useImmer","useImmer","_useImmer2","paramsValue","setParamsValue","debounce","parameterName","console","log","draft","dataFirstChart","dataSecondChart","dataThirdChart","dataFourthChart","dataPartnerChart","Container","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.141d38b6.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  LogarithmicScale,\r\n  Legend,\r\n  Tooltip,\r\n} from \"chart.js\";\r\nimport \"chartjs-plugin-zoom\";\r\n\r\nChart.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  LogarithmicScale,\r\n  Legend,\r\n  Tooltip\r\n);\r\n\r\ninterface ChartPanelProps {\r\n  data: any;\r\n}\r\n\r\nexport const ChartPanel: FC<ChartPanelProps> = (props) => {\r\n  const { data } = props;\r\n\r\n  return (\r\n    <Line\r\n      data={data}\r\n      options={{\r\n        // zoom: {\r\n        //   enabled: true,\r\n        //   mode: \"x\",\r\n        // },\r\n        // pan: {\r\n        //   enabled: true,\r\n        //   mode: \"x\",\r\n        // },\r\n\r\n        scales: {\r\n          x: {\r\n            type: \"logarithmic\",\r\n            position: \"left\", // `axis` is determined by the position as `'y'`\r\n          },\r\n        },\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { Grid, Slider, Typography } from \"@mui/material\";\r\n\r\ninterface ParamsLineProps {\r\n  paramName: string;\r\n  label?: string;\r\n  range?: [number, number];\r\n  step?: number;\r\n  defaultValue?: number;\r\n  onChange: (paramName: string, value: number) => void;\r\n}\r\n\r\nexport const ParamsLine: FC<ParamsLineProps> = (props) => {\r\n  const { paramName, defaultValue, range, step, onChange, label } = props;\r\n  const [minValue, maxValue] = range || [0, 100];\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={4}>\r\n        <Typography variant={\"subtitle2\"}>{label || paramName}</Typography>\r\n      </Grid>\r\n      <Grid item xs={8}>\r\n        <Slider\r\n          aria-label={paramName}\r\n          marks\r\n          min={minValue}\r\n          max={maxValue}\r\n          step={step}\r\n          track={false}\r\n          defaultValue={defaultValue || minValue}\r\n          valueLabelDisplay=\"auto\"\r\n          onChange={(_, value) => onChange(paramName, value as number)}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\n\r\nimport { ParamsLine } from \"../ParamsLine\";\r\nimport { ParameterObject } from \"../../constants\";\r\n\r\ninterface ParamsListProps {\r\n  params: ParameterObject[];\r\n  onChangeParameter: (paramName: string, value: number) => void;\r\n}\r\n\r\nexport const ParamsList: FC<ParamsListProps> = (props) => {\r\n  const { params, onChangeParameter } = props;\r\n\r\n  const renderParameterLines = () => {\r\n    return params.map((param, i) => (\r\n      <Grid key={i} item xl={4} md={6} xs={12}>\r\n        <ParamsLine {...param} onChange={onChangeParameter} />\r\n      </Grid>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <Grid container columnSpacing={2} rowSpacing={4}>\r\n      {renderParameterLines()}\r\n    </Grid>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const ParamsTitle = styled.h1`\r\n  margin: 10;\r\n`;\r\n","import { FunctionParameters } from \"./utils/priceFunction\";\r\n\r\nexport interface ParameterObject {\r\n    paramName: keyof FunctionParameters;\r\n    range: [number, number];\r\n    defaultValue: number;\r\n    step: number;\r\n    label?: string;\r\n}\r\n\r\nexport const parameters: ParameterObject[] = [\r\n    {\r\n        paramName: \"avgSalary\",\r\n        label: \"Средняя зарплата\",\r\n        range: [0, 500000],\r\n        defaultValue: 50000,\r\n        step: 10000,\r\n    },\r\n    {\r\n        paramName: \"warehouseSpace\",\r\n        label: \"Площадь склада\",\r\n        range: [0, 1000],\r\n        defaultValue: 10,\r\n        step: 50,\r\n    },\r\n    {\r\n        paramName: \"warehouseSpaceCost\",\r\n        label: \"Цена за метр склада\",\r\n        range: [0, 5000],\r\n        defaultValue: 0,\r\n        step: 500,\r\n    },\r\n    {\r\n        paramName: \"distanceFromCity\",\r\n        label: \"Коэффициент удаленности от города\",\r\n        range: [0, 1],\r\n        defaultValue: 0.5,\r\n        step: 0.05,\r\n    },\r\n    {\r\n        paramName: \"deliveryCostAvg\",\r\n        label: \"Средняя цена доставки\",\r\n        range: [0, 5000],\r\n        defaultValue: 1000,\r\n        step: 100,\r\n    },\r\n    {\r\n        paramName: \"deliveryPercent\",\r\n        label: \"Процент заказов с доставкой\",\r\n        range: [0, 1],\r\n        defaultValue: 0,\r\n        step: 0.05,\r\n    },\r\n    {\r\n        paramName: \"productPrice\",\r\n        label: \"Средняя рыночная цена товара\",\r\n        range: [0, 500000],\r\n        defaultValue: 40000,\r\n        step: 5000,\r\n    },\r\n    {\r\n        paramName: \"acquireSale\",\r\n        label: \"Скидка на товар для нас\",\r\n        range: [0, 1],\r\n        defaultValue: 0.3,\r\n        step: 0.05,\r\n    },\r\n    {\r\n        paramName: \"periodValuableUsage\",\r\n        label: \"Период полезного использования\",\r\n        range: [0, 10],\r\n        defaultValue: 4,\r\n        step: 1,\r\n    },\r\n    {\r\n        paramName: \"wearTearMulti\",\r\n        label: \"Среднее состояние товара у нас\",\r\n        range: [0, 1],\r\n        defaultValue: 0.7,\r\n        step: 0.05,\r\n    },\r\n    {\r\n        paramName: \"stealProbability\",\r\n        label: \"Вероятность кражи\",\r\n        range: [0, 1],\r\n        defaultValue: 0.05,\r\n        step: 0.05,\r\n    },\r\n    {\r\n        paramName: \"overheadCosts\",\r\n        label: \"Процент накладных расходов\",\r\n        range: [0, 1],\r\n        defaultValue: 0.15,\r\n        step: 0.05,\r\n    },\r\n    {\r\n        paramName: \"prtTestDrive\",\r\n        label: \"Процент партнерам за тест-драйв\",\r\n        range: [0, 1],\r\n        defaultValue: 0.2,\r\n        step: 0.05,\r\n    },\r\n    {\r\n        paramName: \"conversion\",\r\n        label: \"Конверсия на продажу с тест-драйва\",\r\n        range: [0, 1],\r\n        defaultValue: 0.3,\r\n        step: 0.05,\r\n    },\r\n    {\r\n        paramName: \"ourSale\",\r\n        label: \"Наш процент с продажи\",\r\n        range: [0, 1],\r\n        defaultValue: 0.2,\r\n        step: 0.05,\r\n    },\r\n    {\r\n        paramName: \"upDelivery\",\r\n        label: \"Процент наценки за доставку\",\r\n        range: [0, 1],\r\n        defaultValue: 0.1,\r\n        step: 0.05,\r\n    },\r\n    {\r\n        paramName: \"marketing\",\r\n        label: \"Расход на маркетинг\",\r\n        range: [0, 1000],\r\n        defaultValue: 300,\r\n        step: 50,\r\n    },\r\n    {\r\n        paramName: \"dealCntMonth\",\r\n        label: \"Количество сделок для одного товара\",\r\n        defaultValue: 4,\r\n        range: [3, 6],\r\n        step: 1,\r\n    },\r\n    {\r\n        paramName: \"averageCost\",\r\n        label: \"Средняя цена сделки\",\r\n        defaultValue: 5000,\r\n        range: [1000, 20000],\r\n        step: 500,\r\n    },\r\n];\r\n","import React, { FC } from \"react\";\r\nimport { ParamsList } from \"../ParamsList\";\r\nimport * as S from \"./styled\";\r\n\r\nimport { parameters } from \"../../constants\";\r\n\r\ninterface ParamsPanelProps {\r\n  onChangeParameter: (paramName: string, value: number) => void;\r\n}\r\n\r\nexport const ParamsPanel: FC<ParamsPanelProps> = (props) => {\r\n  const { onChangeParameter } = props;\r\n  return (\r\n    <>\r\n      <S.ParamsTitle>Параметры</S.ParamsTitle>\r\n      <ParamsList params={parameters} onChangeParameter={onChangeParameter} />\r\n    </>\r\n  );\r\n};\r\n","import { FunctionParameters } from \"../utils/priceFunction\";\r\nimport { createDataset } from \"../utils/createChartDataset\";\r\nimport { generateColor } from \"../utils/generateColor\";\r\n\r\ninterface UseDatasetPrams {\r\n    params: FunctionParameters;\r\n    axis: number;\r\n    chartsInfo: {\r\n        chartFunction: (prams: FunctionParameters) => (m: number) => number;\r\n        label: string;\r\n        color?: string;\r\n    }[];\r\n}\r\n\r\ninterface DatasetInterace {\r\n    data: number[];\r\n    label: string;\r\n    backgroundColor: string;\r\n    borderColor: string;\r\n}\r\n\r\nexport const useDataset = (data: UseDatasetPrams) => {\r\n    const { params, axis, chartsInfo } = data;\r\n\r\n    const step = 10,\r\n        minAsix = 1;\r\n\r\n    const datasets: DatasetInterace[] = [];\r\n    let commonLabels: string[] = [];\r\n\r\n    chartsInfo.forEach(({ chartFunction, label, color }) => {\r\n        const chartColor = color || generateColor(label);\r\n\r\n        const foo = chartFunction(params);\r\n        const { dataset: data, labels } = createDataset(foo, axis, step, minAsix);\r\n\r\n        commonLabels = labels;\r\n        datasets.push({\r\n            data,\r\n            label,\r\n            backgroundColor: chartColor,\r\n            borderColor: chartColor,\r\n        });\r\n    });\r\n\r\n    return {\r\n        datasets,\r\n        labels: commonLabels,\r\n    };\r\n};\r\n","export const generateColor = (str: string) => {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        hash = str.charCodeAt(i) + ((hash << 8) - hash);\r\n    }\r\n    let colour = \"#\";\r\n    for (let i = 0; i < 3; i++) {\r\n        let value = (hash >> (i * 16)) & 0xff;\r\n        colour += (\"00\" + value.toString(16)).slice(-2);\r\n    }\r\n    return colour;\r\n};\r\n","export const createDataset = (\r\n  func: (m: number) => number,\r\n  axis: number,\r\n  step: number = 1,\r\n  minAsix: number = 0,\r\n): { labels: string[]; dataset: number[] } => {\r\n  const labels = [];\r\n  const dataset = [];\r\n  for (let i = minAsix; i < axis; i += step) {\r\n    labels.push(i.toString());\r\n    dataset.push(func(i));\r\n  }\r\n\r\n  return { dataset, labels };\r\n};\r\n","export interface FunctionParameters {\r\n  avgSalary: number;\r\n  warehouseSpace: number;\r\n  warehouseSpaceCost: number;\r\n  distanceFromCity: number;\r\n  deliveryCostAvg: number;\r\n  deliveryPercent: number;\r\n  productPrice: number;\r\n  periodValuableUsage: number;\r\n  wearTearMulti: number;\r\n  stealProbability: number;\r\n  overheadCosts: number;\r\n  acquireSale: number;\r\n  prtTestDrive: number;\r\n  conversion: number;\r\n  ourSale: number;\r\n  upDelivery: number;\r\n  marketing: number;\r\n  dealCntMonth: number;\r\n  averageCost: number;\r\n}\r\n\r\nexport const fixedCostsForOneDealFunction = (params: FunctionParameters) => {\r\n  const {\r\n    avgSalary,\r\n    warehouseSpace,\r\n    warehouseSpaceCost,\r\n    distanceFromCity,\r\n    overheadCosts,\r\n\r\n    marketing,\r\n  } = params;\r\n\r\n  return (m: number) => {\r\n    const warehouse = warehouseSpace * warehouseSpaceCost * distanceFromCity;\r\n    const salaries = 1.404 * avgSalary * (7 + Math.floor(m / 1000));\r\n\r\n    const fixedCosts = (warehouse + marketing + salaries) * (overheadCosts + 1);\r\n\r\n    return fixedCosts / m;\r\n  };\r\n};\r\n\r\nexport const fixedCostsFunction = (params: FunctionParameters) => {\r\n  return (m: number) => {\r\n    return fixedCostsForOneDealFunction(params)(m) * m;\r\n  };\r\n};\r\n\r\nexport const variableCostsForOneDealFunction = (params: FunctionParameters) => {\r\n  const {\r\n    deliveryCostAvg,\r\n    deliveryPercent,\r\n    productPrice,\r\n    periodValuableUsage,\r\n    wearTearMulti,\r\n    stealProbability,\r\n    overheadCosts,\r\n    acquireSale,\r\n\r\n    conversion,\r\n    dealCntMonth,\r\n  } = params;\r\n  return (m: number) => {\r\n    const productPriceWithSale = productPrice * (1 - acquireSale);\r\n    const delivery = (2 + conversion) * deliveryCostAvg * deliveryPercent;\r\n    const steal = productPriceWithSale * wearTearMulti * stealProbability;\r\n    const valuableUsage =\r\n      productPriceWithSale / (12 * periodValuableUsage * dealCntMonth);\r\n\r\n    const variableCosts =\r\n      (delivery + steal + valuableUsage) * (overheadCosts + 1);\r\n    return variableCosts;\r\n  };\r\n};\r\n\r\nexport const variableCostsFunction = (params: FunctionParameters) => {\r\n  return (m: number) => {\r\n    return variableCostsForOneDealFunction(params)(m) * m;\r\n  };\r\n};\r\n\r\nexport const totalCostsForOneDealFunction = (params: FunctionParameters) => {\r\n  return (m: number) => {\r\n    const fixedCosts = fixedCostsForOneDealFunction(params)(m);\r\n    const variableCosts = variableCostsForOneDealFunction(params)(m);\r\n    return fixedCosts + variableCosts;\r\n  };\r\n};\r\n\r\nexport const totalCostsFunction = (params: FunctionParameters) => {\r\n  return (m: number) => {\r\n    const fixedCosts = fixedCostsFunction(params)(m);\r\n    const variableCosts = variableCostsFunction(params)(m);\r\n    return fixedCosts + variableCosts;\r\n  };\r\n};\r\n\r\nexport const incomeFunction = (params: FunctionParameters) => {\r\n  const {\r\n    averageCost,\r\n    conversion,\r\n    ourSale,\r\n    productPrice,\r\n    prtTestDrive,\r\n    acquireSale,\r\n  } = params;\r\n  return (m: number) => {\r\n    const income =\r\n      (1 - prtTestDrive) * m * averageCost +\r\n      ourSale *\r\n        m *\r\n        conversion *\r\n        (productPrice - averageCost - productPrice * (1 - acquireSale));\r\n    return income;\r\n  };\r\n};\r\n\r\nexport const profitFunction = (params: FunctionParameters) => {\r\n  return (m: number) => {\r\n    const profitByRent =\r\n      incomeFunction(params)(m) - totalCostsFunction(params)(m);\r\n    return profitByRent;\r\n  };\r\n};\r\n\r\nexport const partnerIncomeFunction = (params: FunctionParameters) => {\r\n  const {\r\n    prtTestDrive,\r\n    averageCost,\r\n    conversion,\r\n    ourSale,\r\n    productPrice,\r\n    acquireSale,\r\n  } = params;\r\n  return (m: number) => {\r\n    const profitByTestDrive = prtTestDrive * averageCost * m;\r\n    const profitBySale =\r\n      (productPrice * (1 - acquireSale) +\r\n        productPrice * acquireSale * (1 - ourSale)) *\r\n      m *\r\n      conversion;\r\n    return profitBySale + profitByTestDrive;\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { debounce } from \"ts-debounce\";\r\nimport { useImmer } from \"use-immer\";\r\nimport { Container, Grid } from \"@mui/material\";\r\n\r\nimport { ChartPanel } from \"./components/ChartPanel\";\r\nimport { ParamsPanel } from \"./components/ParamsPanel\";\r\nimport { parameters } from \"./constants\";\r\nimport { useDataset } from \"./hooks/useDataset\";\r\nimport {\r\n    FunctionParameters,\r\n    fixedCostsForOneDealFunction,\r\n    fixedCostsFunction,\r\n    incomeFunction,\r\n    partnerIncomeFunction,\r\n    profitFunction,\r\n    totalCostsForOneDealFunction,\r\n    totalCostsFunction,\r\n    variableCostsForOneDealFunction,\r\n    variableCostsFunction,\r\n} from \"./utils/priceFunction\";\r\n\r\nexport const App = () => {\r\n    const initialState = parameters.reduce<{\r\n        [key: string]: number;\r\n    }>((result, curr) => {\r\n        result[curr.paramName] = curr.defaultValue;\r\n        return result;\r\n    }, {});\r\n\r\n    const [paramsValue, setParamsValue] = useImmer(initialState);\r\n\r\n    const cahangeParameterHandler = (parameterName: string, value: number) => {\r\n        console.log(parameterName, value);\r\n\r\n        setParamsValue((draft) => {\r\n            draft[parameterName] = value;\r\n        });\r\n    };\r\n\r\n    const onChangeParameter = debounce(cahangeParameterHandler, 1000);\r\n\r\n    const dataFirstChart = useDataset({\r\n        params: (paramsValue as unknown) as FunctionParameters,\r\n        axis: 20000,\r\n        chartsInfo: [\r\n            {\r\n                chartFunction: fixedCostsForOneDealFunction,\r\n                label: \"fixed\",\r\n            },\r\n            {\r\n                chartFunction: totalCostsForOneDealFunction,\r\n                label: \"total\",\r\n            },\r\n            {\r\n                chartFunction: variableCostsForOneDealFunction,\r\n                label: \"variable\",\r\n            },\r\n        ],\r\n    });\r\n\r\n    const dataSecondChart = useDataset({\r\n        params: (paramsValue as unknown) as FunctionParameters,\r\n        axis: 20000,\r\n        chartsInfo: [\r\n            {\r\n                chartFunction: fixedCostsFunction,\r\n                label: \"fixed\",\r\n            },\r\n            {\r\n                chartFunction: totalCostsFunction,\r\n                label: \"total\",\r\n            },\r\n            {\r\n                chartFunction: variableCostsFunction,\r\n                label: \"variable\",\r\n            },\r\n        ],\r\n    });\r\n    const dataThirdChart = useDataset({\r\n        params: (paramsValue as unknown) as FunctionParameters,\r\n        axis: 20000,\r\n        chartsInfo: [\r\n            {\r\n                chartFunction: incomeFunction,\r\n                label: \"income\",\r\n            },\r\n            {\r\n                chartFunction: totalCostsFunction,\r\n                label: \"total\",\r\n            },\r\n        ],\r\n    });\r\n\r\n    const dataFourthChart = useDataset({\r\n        params: (paramsValue as unknown) as FunctionParameters,\r\n        axis: 20000,\r\n        chartsInfo: [\r\n            {\r\n                chartFunction: profitFunction,\r\n                label: \"profit\",\r\n                color: \"#cc9aff\",\r\n            },\r\n        ],\r\n    });\r\n\r\n    const dataPartnerChart = useDataset({\r\n        params: (paramsValue as unknown) as FunctionParameters,\r\n        axis: 20000,\r\n        chartsInfo: [\r\n            {\r\n                chartFunction: partnerIncomeFunction,\r\n                label: \"partner\",\r\n            },\r\n        ],\r\n    });\r\n\r\n    return (\r\n        <Container>\r\n            <ParamsPanel onChangeParameter={onChangeParameter} />\r\n            <Grid container>\r\n                <Grid item xs={12} md={6}>\r\n                    <ChartPanel data={dataFirstChart} />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <ChartPanel data={dataSecondChart} />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <ChartPanel data={dataThirdChart} />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <ChartPanel data={dataFourthChart} />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <ChartPanel data={dataPartnerChart} />\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { App } from \"./App\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\")!);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n"],"sourceRoot":""}